class App extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      breakLength:5,
      sessionLength:25,
      inSession: true,
      start:false,
      timeLeft:1500
    }
    this.break = this.break.bind(this)
    this.session = this.session.bind(this)
    this.timer = this.timer.bind(this)
    this.icons = this.icons.bind(this)
    this.reset = this.reset.bind(this)
    this.start = this.start.bind(this)
    this.stop = this.stop.bind(this)
    this.incrementBreak = this.incrementBreak.bind(this)
    this.decrementBreak = this.decrementBreak.bind(this)
    this.incrementSession = this.incrementSession.bind(this)
    this.decrementSession = this.decrementSession.bind(this)
    this.countDown = null
    this.sessionToBreak = this.sessionToBreak.bind(this)
    this.breakToSession = this.breakToSession.bind(this)
    this.checkTime = this.checkTime.bind(this)
  }
  
  break () {
    return (
      <div id="break">
        <h2 id="break-label">Break Length</h2>
        <div id="break-incdec">
          <i onClick={this.incrementBreak} class="glyphicon glyphicon-arrow-up" id="break-increment"></i>
          <h2 id="break-length">{this.state.breakLength}</h2>
          <i onClick={this.decrementBreak} class="glyphicon glyphicon-arrow-down" id="break-decrement"></i>
        </div>
      </div>
    )
  }
  
  session() {
    return (
      <div id="session">
        <h2 id="session-label">Session Length</h2>
        <div id="session-incdec">
          <i onClick={this.incrementSession} class="glyphicon glyphicon-arrow-up" id="session-increment"></i>
          <h2 id="session-length">{this.state.sessionLength}</h2>
          <i onClick={this.decrementSession} class="glyphicon glyphicon-arrow-down" id="session-decrement"></i>
        </div>
      </div>
    )
  }
  
  timer () {
    const sessionLabel = (<h2 id="timer-label">Session</h2>)
    const breakLabel = (<h2 id="timer-label">Break</h2>)
    let timeLeft = Math.floor(this.state.timeLeft / 60).toString().padStart(2,'0') + ':' + (this.state.timeLeft % 60).toString().padStart(2, '0')
    return (
      <div id="timer">
        {this.state.inSession 
        ? sessionLabel
        : breakLabel}
        <h1 id="time-left">{timeLeft}</h1>
      </div>
    )
  }
  
  icons() {
    const start = <i onClick={this.start} id="start_stop" class="glyphicon glyphicon-play"></i>
    const stop = <i onClick={this.stop} id="start_stop" class="glyphicon glyphicon-pause"></i>
    return (
      <div id="icons">
        {this.state.start ? stop : start}
        <i id="reset" class="glyphicon glyphicon-step-backward" onClick={this.reset}></i>
      </div>
    )
  }
  
  reset() {
    clearInterval(this.countDown)
    this.audioBeep.pause()
    this.audioBeep.currentTime =0
    this.setState({
      breakLength:5,
      sessionLength:25,
      inSession: true,
      start:false,
      timeLeft:1500
    })
  }
  
  incrementBreak() {
    if(!(this.state.start) && this.state.breakLength > 1 && this.state.breakLength < 60) {
      this.setState(state => ({
        breakLength: state.breakLength + 1
      }))
    }
  }
  
  incrementSession() {
    if(!(this.state.start) && this.state.sessionLength > 1 && this.state.sessionLength < 60) {
      this.setState(state => ({
        sessionLength: state.sessionLength + 1,
        timeLeft: (state.sessionLength + 1) * 60
      }))
    }
  }
  
  decrementBreak() {
    if(!(this.state.start) && this.state.breakLength > 1 && this.state.breakLength < 60) {
      this.setState(state => ({
        breakLength: state.breakLength - 1
      }))
    }
  }
  
  decrementSession() {
    if(!(this.state.start) && this.state.sessionLength > 1 && this.state.sessionLength < 60) {
      this.setState(state => ({
        sessionLength: state.sessionLength - 1,
        timeLeft:(state.sessionLength - 1) * 60
      }))
    }
  }
  
  start() {
    this.setState(state => ({
      start:true
    }))
    this.countDown = setInterval((() => {
      this.setState(state => ({
        timeLeft: state.timeLeft - 1
    }));this.checkTime()}), 1000)
  }
  
  stop() {
    clearInterval(this.countDown)
    this.setState(state => ({
      start:false
    }))
  }
  
  sessionToBreak () {
    this.stop()
    this.setState(state => ({
      inSession:false,
      timeLeft: state.breakLength * 60
    }))
    this.start()
  }
  
  breakToSession() {
    this.stop()
    this.setState(state => ({
      inSession:true,
      timeLeft:state.sessionLength * 60
    }))
    this.start()
  }
  
  checkTime () {
    if (this.state.timeLeft < 0) {
      this.audioBeep.play()
      if (this.state.inSession) {
        this.sessionToBreak()
      } else {
        this.breakToSession()
      }
    }
  }
  
  render() {
    return (
    <div id="app">
      <div id="title"><h1>25 + 5 Clock</h1></div>
        <div id="session-break">
          {this.break()}
          {this.session()}
        </div>
      {this.timer()}
      {this.icons()}
      <audio
          id="beep"
          preload="auto"
          ref={(audio) => {
            this.audioBeep = audio;
          }}
          src="https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav"
        />
    </div>)
  }
  
}

ReactDOM.render(<App />, document.getElementById('root'))